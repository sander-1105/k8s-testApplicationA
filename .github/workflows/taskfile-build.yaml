name: Taskfile Chart Build and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: 'v3.18.2'

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run CI tasks (lint and test)
        run: task ci:default

      - name: Build and package chart
        run: task release

      - name: Upload chart artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ github.sha }}
          path: target/*.tgz
          retention-days: 30

      - name: Log in to Container Registry
        if: github.event_name == 'push' || github.event_name == 'release'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart to OCI registry
        if: github.event_name == 'push' || github.event_name == 'release'
        run: |
          CHART_NAME=$(task helm:get-name)
          CHART_VERSION=$(task helm:get-version)
          
          # Push chart
          # helm push "target/${CHART_NAME}-${CHART_VERSION}.tgz" "oci://${{ env.REGISTRY }}/${{ github.repository_owner }}"


  tags:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
          
      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Update local version
        id: version_update
        run: |
          # Get current version using yq
          CURRENT_VERSION=$(yq '.version' Chart.yaml)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not get current version from Chart.yaml"
            exit 1
          fi
          
          # Extract major, minor, and patch versions
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
            echo "Error: Invalid version format in Chart.yaml"
            exit 1
          fi
          
          # Increment minor version
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}.${PATCH}"
          
          # Save new version as output
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Update version in Chart.yaml using yq
          yq -i ".version = \"${NEW_VERSION}\"" Chart.yaml
          if [ $? -ne 0 ]; then
            echo "Error: Failed to update version in Chart.yaml"
            exit 1
          fi
          
          # Create git config
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Commit local version change
          git add Chart.yaml
          git commit -m "chore: bump local version to ${NEW_VERSION}"
          git push
          if [ $? -ne 0 ]; then
            echo "Error: Failed to push version update"
            exit 1
          fi
          
          

      - name: Tag
        run: |
          # Get the new version from previous step
          NEW_VERSION=${{ steps.version_update.outputs.new_version }}
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: Could not get new version from previous step"
            exit 1
          fi

          # Create and push tag for current repository
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to push tag"
            exit 1
          fi
